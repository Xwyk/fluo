{
  "name": "telnet-client",
  "description": "A simple node.js telnet client",
  "author": {
    "name": "Mario Kozjak",
    "email": "kozjakm1@gmail.com"
  },
  "version": "0.13.4",
  "main": "./lib/index.js",
  "engine": "node >= 6.9.1",
  "license": "MIT",
  "dependencies": {
    "bluebird": "3.4.x"
  },
  "devDependencies": {
    "coveralls": "^2.11.x",
    "jscoverage": "^0.6.x",
    "nodeunit": ">= 0.9.x",
    "telnet": "0.0.1"
  },
  "scripts": {
    "test": "nodeunit test",
    "coveralls": "jscoverage lib && NODETELNETCLIENT_COV=1 nodeunit --reporter=lcov test | coveralls"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/mkozjak/node-telnet-client.git"
  },
  "contributors": [
    {
      "name": "Petar Koretic",
      "email": "petar.koretic@gmail.com"
    },
    {
      "name": "stardast"
    },
    {
      "name": "ChristopherHackett"
    },
    {
      "name": "EyePulp"
    },
    {
      "name": "HaykoKoryun"
    },
    {
      "name": "silverwind"
    },
    {
      "name": "Peter Halliday",
      "email": "pghalliday@gmail.com"
    },
    {
      "name": "kaYcee"
    },
    {
      "name": "bryanculver"
    },
    {
      "name": "fbertone"
    },
    {
      "name": "Shastel"
    },
    {
      "name": "barak-shirali"
    },
    {
      "name": "HaykoKoryun"
    }
  ],
  "readme": "[![GitHub license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/mkozjak/node-telnet-client/blob/master/LICENSE)\n[![Build Status](https://travis-ci.org/mkozjak/node-telnet-client.svg?branch=master)](https://travis-ci.org/mkozjak/node-telnet-client)\n[![Coverage Status](https://coveralls.io/repos/mkozjak/node-telnet-client/badge.svg?branch=master)](https://coveralls.io/r/mkozjak/node-telnet-client?branch=master)\n[![npm](https://img.shields.io/npm/dm/telnet-client.svg?maxAge=2592000)](https://www.npmjs.com/package/telnet-client)  \n[![NPM](https://nodei.co/npm/telnet-client.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/telnet-client/)\n\n# node-telnet-client\n\nA simple telnet client for node.js\n\n## Installation\n\nLocally in your project or globally:\n\n```\nnpm install telnet-client\nnpm install -g telnet-client\n```\n\n## Responsible disclosure\n\nSince version 0.11.x, we have moved from using ```new Buffer``` to ```Buffer.from```,\nbecause when the library is used with latest Node.js, it issues a deprecation warning\n(see [PR #63](https://github.com/mkozjak/node-telnet-client/pull/63)).\nAlso, since version 0.12.x, we have moved to ECMAScript 6 to utilize class and scoping features.\n\nThis means we have moved exclusively to Current and LTS Node.js releases.\nShould there be any problems with it, please check if the corresponding issue is opened,\nand if not, open it so we can reach out and try to solve the deprecation problem.\n\n## Usage example\n### Callback-style\n\n```js\nvar telnet = require('telnet-client');\nvar connection = new telnet();\n\nvar params = {\n  host: '127.0.0.1',\n  port: 23,\n  shellPrompt: '/ # ',\n  timeout: 1500,\n  // removeEcho: 4\n};\n\nconnection.on('ready', function(prompt) {\n  connection.exec(cmd, function(err, response) {\n    console.log(response);\n  });\n});\n\nconnection.on('timeout', function() {\n  console.log('socket timeout!')\n  connection.end();\n});\n\nconnection.on('close', function() {\n  console.log('connection closed');\n});\n\nconnection.connect(params);\n```\n\n### Promises\n\n```js\nvar telnet = require('telnet-client');\nvar connection = new telnet();\n\nvar params = {\n  host: '127.0.0.1',\n  port: 23,\n  shellPrompt: '/ # ',\n  timeout: 1500,\n  // removeEcho: 4\n};\n\nconnection.connect(params)\n.then(function(prompt) {\n  connection.exec(cmd)\n  .then(function(res) {\n    console.log('promises result:', res)\n  })\n}, function(error) {\n  console.log('promises reject:', error)\n});\n```\n\n### Generators\n\n```js\nvar co = require('co')\nvar bluebird = require('bluebird')\nvar telnet = require('telnet-client');\nvar connection = new telnet();\n\nvar params = {\n  host: '127.0.0.1',\n  port: 23,\n  shellPrompt: '/ # ',\n  timeout: 1500,\n  // removeEcho: 4\n};\n\n// using 'co'\nco(function*() {\n  yield connection.connect(params)\n\n  let res = yield connection.exec(cmd)\n  console.log('coroutine result:', res)\n})\n\n// using 'bluebird'\nbluebird.coroutine(function*() {\n  yield connection.connect(params)\n\n  let res = yield connection.exec(cmd)\n  console.log('coroutine result:', res)\n})()\n```\n\n### Async/Await (using babeljs)\n\n```js\n'use strict'\n\nconst Promise = require('bluebird')\nconst telnet = require('telnet-client')\n\nrequire('babel-runtime/core-js/promise').default = Promise\n\nPromise.onPossiblyUnhandledRejection(function(error) {\n  throw error\n})\n\n// also requires additional babeljs setup\n\nasync function run() {\n  let connection = new telnet()\n\n  let params = {\n    host: '127.0.0.1',\n    port: 23,\n    shellPrompt: '/ # ',\n    timeout: 1500\n  }\n\n  await connection.connect(params)\n\n  let res = await connection.exec(cmd)\n  console.log('async result:', res)\n}\n\nrun()\n```\n\n## API\n\n```js\nvar telnet = require('telnet-client');\nvar connection = new telnet();\n```\n\n### connection.connect(options) -> Promise\n\nCreates a new TCP connection to the specified host, where 'options' is an object\nwhich can include following properties:\n\n* `host`: Host the client should connect to. Defaults to '127.0.0.1'.\n* `port`: Port the client should connect to. Defaults to '23'.\n* `timeout`: Sets the socket to timeout after the specified number of milliseconds\nof inactivity on the socket.\n* `shellPrompt`: Shell prompt that the host is using. Can be a string or an instance of RegExp. Defaults to regex '/(?:\\/ )?#\\s/'.\n* `loginPrompt`: Username/login prompt that the host is using. Can be a string or an instance of RegExp. Defaults to regex '/login[: ]*$/i'.\n* `passwordPrompt`: Username/login prompt that the host is using. Can be a string or an instance of RegExp. Defaults to regex '/Password: /i'.\n* `failedLoginMatch`: String or regex to match if your host provides login failure messages. Defaults to undefined.\n* `username`: Username used to login. Defaults to 'root'.\n* `password`: Password used to login. Defaults to 'guest'.\n* `irs`: Input record separator. A separator used to distinguish between lines of the response. Defaults to '\\r\\n'.\n* `ors`: Output record separator. A separator used to execute commands (break lines on input). Defaults to '\\n'.\n* `echoLines`: The number of lines used to cut off the response. Defaults to 1.\n* `stripShellPrompt`: Whether shell prompt should be excluded from the results. Defaults to true.\n* `pageSeparator`: The pattern used (and removed from final output) for breaking the number of lines on output. Defaults to '---- More'.\n* `negotiationMandatory`: Disable telnet negotiations if needed. Can be used with 'send' when telnet specification is not needed.\nTelnet client will then basically act like a simple TCP client. Defaults to true.\n* `execTimeout`: A timeout used to wait for a server reply when the 'exec' method is used. Defaults to 2000 (ms).\n* `sendTimeout`: A timeout used to wait for a server reply when the 'send' method is used. Defaults to 2000 (ms).\n* `maxBufferLength`: Maximum buffer length in bytes which can be filled with response data. Defaults to 1M.\n* `debug`: Enable/disable debug logs on console. Defaults to false.\n\nResolves once the connection is ready (analogous to the ```ready``` event).\n\n### connection.exec(data, [options], [callback]) -> Promise\n\nSends data on the socket (should be a compatible remote host's command if sane information is wanted).\nThe optional callback parameter will be executed with an error and response when the command is finally written out and the response data has been received.  \nIf there was no error when executing the command, 'error' as the first argument to the callback will be undefined.\nCommand result will be passed as the second argument to the callback.  \n\n__*** important notice/API change from 0.3.0 ***__  \nThe callback argument is now called with a signature of (error, [response])  \n\nOptions:\n\n* `shellPrompt`: Shell prompt that the host is using. Can be a string or an instance of RegExp. Defaults to regex '/(?:\\/ )?#\\s/'.\n* `loginPrompt`: Username/login prompt that the host is using. Can be a string or an instance of RegExp. Defaults to regex '/login[: ]*$/i'.\n* `failedLoginMatch`: String or regex to match if your host provides login failure messages. Defaults to undefined.\n* `timeout`: Sets the socket to timeout after the specified number of milliseconds\nof inactivity on the socket.\n* `execTimeout`: A timeout used to wait for a server reply when this method is used. Defaults to 'undefined'.\n* `maxBufferLength`: Maximum buffer length in bytes which can be filled with response data. Defaults to 1M.\n* `irs`: Input record separator. A separator used to distinguish between lines of the response. Defaults to '\\r\\n'.\n* `ors`: Output record separator. A separator used to execute commands (break lines on input). Defaults to '\\n'.\n* `echoLines`: The number of lines used to cut off the response. Defaults to 1.\n\n### connection.send(data, [options], [callback]) -> Promise\n\nSends data on the socket without requiring telnet negotiations.\n\nOptions:\n\n* `ors`: Output record separator. A separator used to execute commands (break lines on input). Defaults to '\\n'.\n* `waitfor`: Wait for the given string before returning a response. If not defined, the timeout value will be used.\n* `timeout`: A timeout used to wait for a server reply when the 'send' method is used. Defaults to 2000 (ms) or to sendTimeout ('connect' method) if set.\n* `maxBufferLength`: Maximum buffer length in bytes which can be filled with response data. Defaults to 1M.\n\n### connection.shell(callback) -> Promise\n\nStarts an interactive shell session. Returns a duplex stream which can be used to read and write data.\n\n### connection.end() -> Promise\n\nHalf-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.\n\n### connection.destroy() -> Promise\n\nEnsures that no more I/O activity happens on this socket. Only necessary in case of errors (parse error or so).\n\n### Event: 'connect'\n\nEmitted when a socket connection is successfully established.\n\n### Event: 'ready'\n\nEmitted when a socket connection is successfully established and the client is successfully connected to the specified remote host.\nA value of prompt is passed as the first argument to the callback.\n\n### Event: 'writedone'\n\nEmitted when the write of given data is sent to the socket.\n\n### Event: 'data'\n\nThis is a forwarded 'data' event from core 'net' library. A `<buffer>` is received when this event is triggered.\n\n### Event: 'timeout'\n\nEmitted if the socket times out from inactivity. This is only to notify that the socket has been idle.\nThe user must manually close the connection.\n\n### Event: 'failedlogin'\n\nEmitted when the failedLoginMatch pattern is provided and a match is found from the host. The 'destroy()' method is called directly following this event.\n\n### Event: 'error'\n\nEmitted when an error occurs. The 'close' event will be called directly following this event.\n\n### Event: 'end'\n\nEmitted when the other end of the socket (remote host) sends a FIN packet.\n\n### Event: 'close'\n\nEmitted once the socket is fully closed.\n\n## License\n\n  [MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mkozjak/node-telnet-client/issues"
  },
  "_id": "telnet-client@0.13.4",
  "dist": {
    "shasum": "aa9405bd301e2b9e05890486aa128dbbf861e278"
  },
  "_from": "telnet-client@",
  "_resolved": "https://registry.npmjs.org/telnet-client/-/telnet-client-0.13.4.tgz"
}
